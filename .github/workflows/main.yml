name: CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  pull-requests: write

jobs:
  ci:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install deps
        run: npm ci

      - name: Run tests
        run: npm test -- --ci

      - name: Build app (vite)
        run: npm run build

  # ðŸš€ Preview deploy on PRs
  preview_deploy:
    name: Deploy Preview to Vercel
    needs: ci
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    concurrency:
      group: preview-${{ github.event.pull_request.number }}
      cancel-in-progress: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Link Vercel project (name + scope)
        run: vercel link --yes --project "${{ secrets.VERCEL_PROJECT_NAME }}" --scope "${{ secrets.VERCEL_SCOPE }}" --token "${{ secrets.VERCEL_TOKEN }}"

      - name: Pull Vercel env (preview)
        run: vercel pull --yes --environment=preview --scope "${{ secrets.VERCEL_SCOPE }}" --token "${{ secrets.VERCEL_TOKEN }}"

      - name: Build with Vercel (prebuilt)
        run: vercel build --token "${{ secrets.VERCEL_TOKEN }}"

      - name: Deploy prebuilt (preview)
        id: deploy_preview
        run: |
          url=$(vercel deploy --prebuilt --scope "${{ secrets.VERCEL_SCOPE }}" --token "${{ secrets.VERCEL_TOKEN }}")
          echo "preview_url=$url" >> $GITHUB_OUTPUT
          echo "Preview URL: $url"

      - name: Comment/Update preview URL on PR
        uses: actions/github-script@v7
        env:
          PREVIEW_URL: ${{ steps.deploy_preview.outputs.preview_url }}
        with:
          script: |
            const marker = '<!-- vercel-preview-comment -->';
            const {owner, repo} = context.repo;
            const issue_number = context.issue.number;
            const sha = context.payload.pull_request.head.sha.slice(0,7);
            const branch = context.payload.pull_request.head.ref;
            const body = `${marker}
            âœ… **Vercel Preview Ready**
            **Branch:** \`${branch}\`  |  **Commit:** \`${sha}\`
            **URL:** ${process.env.PREVIEW_URL}

            _This comment updates on new commits._`;

            const {data: comments} = await github.rest.issues.listComments({ owner, repo, issue_number, per_page: 100 });
            const existing = comments.find(c => c.body && c.body.includes(marker));
            if (existing) {
              await github.rest.issues.updateComment({ owner, repo, comment_id: existing.id, body });
            } else {
              await github.rest.issues.createComment({ owner, repo, issue_number, body });
            }

  # ðŸŒŸ Production deploy on push to main
  deploy:
    name: Deploy to Vercel (prod)
    needs: ci
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Link Vercel project (name + scope)
        run: vercel link --yes --project "${{ secrets.VERCEL_PROJECT_NAME }}" --scope "${{ secrets.VERCEL_SCOPE }}" --token "${{ secrets.VERCEL_TOKEN }}"

      - name: Pull Vercel env (production)
        run: vercel pull --yes --environment=production --scope "${{ secrets.VERCEL_SCOPE }}" --token "${{ secrets.VERCEL_TOKEN }}"

      - name: Build with Vercel (prebuilt)
        run: vercel build --prod --token "${{ secrets.VERCEL_TOKEN }}"

      - name: Deploy prebuilt (production)
        run: vercel deploy --prebuilt --prod --scope "${{ secrets.VERCEL_SCOPE }}" --token "${{ secrets.VERCEL_TOKEN }}"
